#!/bin/sh
#
# $Id: new_irred_with_orders,v 1.14 2002/09/11 17:07:19 jon Exp $
#
# Script to classify an irreducible representation
#
# Inputs
# $1: initial memory
# $2: generator a
# $3: order a
# $4: generator b
# $5: order b
# $6-: other generators and orders
#
# outputs will be of the form irred/${nor}_${i}_{1,..}
# where nor = znor $a and i is an available unused index
#
#
# Return codes
# 1: error in parameters
# 0: new irreducible
# 254: no nullity one element found
# 255: existing irreducible
#
usage="$0: usage: $0 <memory> <a> <order a> <b> <order b> [<other generators and orders>]"
if [ $# -lt 5 ]; then
  echo $usage
  exit 1;
fi
. functions
memory=$1
a=$2
o_a=$3
b=$4
o_b=$5
if [ -e $a -a -e $b ]; then
  nor=`znor $a`
  noc=`znoc $a`
  if [ $nor -ne $noc ]; then
    echo "$0: $a is not square"
    exit 1
  fi
  if [ $nor -ne `znor $b` -o $nor -ne `znoc $b` ]; then
    echo $a and $b are not compatible
    exit 1
  fi
else
  echo "$0: missing files $a or $b"
  exit 1
fi
let i=$#-1
let j=$i/2
let k=$j*2
if [ $i -ne $k ]; then
  echo "$0: missing order for final generator"
  exit 1
fi
i=0
shift 1
line=
while [ $i -lt $j ]; do
  rest[$i]=$1
  o_rest[$i]=$2
  let i=$i+1
  line="$line $1 $2"
  shift 2
done
#
# Now search for element of nullity one
#
tmp=tmp${PPID}
e=${tmp}.1
name=${tmp}_${nor}
ok=0
i=1
script=`find_nullity_one_with_orders $e $memory $line`
ret=$?
if [ 0 -eq $ret ]; then
  x=`base $e ${name} ${tmp}.0 ${rest[*]}`
  ret=$?
  if [ $ret -ne 0 ]; then
    echo base returns $ret, terminating
    rm -f ${tmp}*
    exit 1
  fi
elif [ 254 -eq $ret ]; then
# Irreducible not absolutely irreducible
  script=`find_best_nullity_with_orders $e $memory $line`
  ret=$?
  if [ 0 -ne $ret ]; then
    echo $script
    rm -f ${tmp}*
    exit 1
  fi
# Find the nullspace
  ok=0
  while [ $ok -eq 0 ]; do
    nullity=`zns $e ${tmp}.0 $memory 2>&1`
    ret=$?
    if [ $ret -eq 0 ]; then
      ok=1
    elif [ $ret -eq 2 ]; then
      let memory=`more_memory $memory 2>/dev/null`
    else
      rm -f ${tmp}*
      echo $nullity
      exit 1
    fi
  done
  if [ 0 -eq $nullity -o 1 -eq $nullity ]; then
    echo "Unexpected result, nullity $nullity when expected > 1"
    rm -f ${tmp}*
    exit 1
  fi
# echo nullity $nullity
# Pick two distinct elements in the span
  zspan ${tmp}.0 ${tmp}.2 2
  zsel ${tmp}.2 ${tmp}.2.0 0
  zsel ${tmp}.2 ${tmp}.2.1 1
# Produce both standard bases
  for i in 0 1; do
    base_from_vector ${tmp}.2.$i ${name}_sb_$i ${tmp}.3 ${rest[*]}
    ret=$?
    if [ 0 -ne $ret ]; then
      rm -f ${tmp}*
      exit $ret
    fi
  done
# Compare, if equal all ok, if not, fail
  eq=1;
  i=1
  while [ $i -le $j ]; do
    if zdiff ${name}_sb_0_$i ${name}_sb_1_$i 1>/dev/null; then
      eq=1
    else
      eq=0
      break
    fi
    let i=$i+1
  done
  if [ 0 -eq $eq ]; then
    echo failed to produce a standard basis for $a
    rm -f ${tmp}*
    exit 254
  fi
  i=1;
  while [ $i -le $j ]; do
    mv ${name}_sb_0_$i ${name}_sb_$i
    rm ${name}_sb_1_$i
    let i=$i+1
  done
else
  echo $script
  rm -f ${tmp}.*
  exit $ret
fi
if [ ! -e irreds ]; then
  mkdir irreds
fi
names=`ls irreds/${nor}_*_1 2>/dev/null`
ret=$?
if [ $ret -eq 0 ]; then
# echo Found some irreducibles
# Some irreds of this dimension
  for x in $names; do
    y=`echo $x | sed -e "s/_1$//g"`
    eq=1
    i=1;
    while [ $i -le $j ]; do
      if [ -e ${y}_$i ]; then
        if zdiff ${y}_$i ${name}_sb_$i 1>/dev/null; then
          eq=1
        else
          eq=0
          break
        fi
      else
        eq=0
        break
      fi
      let i=$i+1
    done
    if [ 1 -eq $eq ] ; then
      echo Existing irreducible ${y} found
      rm -f ${tmp}*
      exit 255
    fi
  done
fi
#
# New irreducible found
#
new_name=`new_irred_name irreds/${nor}`
echo Found a new irreducible ${new_name} of dimension ${nor} using script $script
#echo assigning new name ${new_name}
i=1
while [ $i -le $j ]; do
  mv ${name}_sb_$i ${new_name}_$i
  let i=$i+1
done
if [ -e ${new_name}_1_${script} -o -L ${new_name}_1_${script} ]; then
  rm ${new_name}_1_${script}
fi
ln -s ${new_name}_1 ${new_name}_1_${script}
rm -f ${tmp}*
exit 0
