#
# $Id: find_nullity_one,v 1.1 2002/01/14 23:43:45 jon Exp $
#
# Script to find an element of nullity one in two generators
#
# Inputs
# $1: generator a
# $2: generator b
# $3: output file name
#
usage="$0: usage: $0 <a> <b> <out>"
if [ $# -ne 3 ]; then
  echo $usage
  exit 1;
fi
. functions
a=$1
b=$2
e=$3
tmp=tmp${PPID}
ok=0
memory=200
nor=`znor $a`
q=`zprime $a`
id=id_${q}_$nor
if [ ! -e $id ]; then
  echo Creating id
  zid $q $nor $nor $id
fi
for i in 1 2 3 4 5 6 7 8 9 10; do
  f$i $id $a $b ${tmp}.1 ${tmp}.1
  if [ $? -ne 0 ]; then
    rm -f ${tmp}*
    exit 1
  fi
  r=`zrn ${tmp}.1 $memory 2>/dev/null`
  ret=$?
  while [ $ret -eq 2 ]; do
    let memory=`more_memory $memory`
    r=`zrn ${tmp}.1 $memory 2>/dev/null`
    ret=$?
  done
  if [ $ret -ne 0 ]; then
    rm -f ${tmp}*
    exit 1
  fi
  let s=$r+1
  if [ $s -eq $nor ]; then
    ok=1
    break
  fi
done
if [ $ok -eq 0 ]; then
# Try zsums
# First compute o_a and o_b
  o_a=`order $a`
  ret=$?
  if [ 0 -ne $ret ]; then
    echo Cannot compute order of $a
    exit 1
  fi
  o_b=`order $b`
  ret=$?
  if [ 0 -ne $ret ]; then
    echo Cannot compute order of $b
    exit 1
  fi
  while [ $ok -eq 0 ]; do
    out=`zsums $a $b ${tmp}.zsums $o_a $o_b 10 $memory`
    ret=$?
    if [ 2 -eq $ret ]; then
      let memory=`more_memory $memory`
    elif [ 0 -eq $ret ]; then
      ok=1
      name=`echo $out | sed -e "s/^.*element //g;s/ of nullity.*$//g"`
      cp ${name} $e
    else
      echo Failed to find an element of nullity one
      rm -f ${tmp}*
      exit 254
    fi
  done
else
  cp -p ${tmp}.1 $e
fi
