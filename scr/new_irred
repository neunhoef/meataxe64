#
# $Id: new_irred,v 1.1 2002/01/06 16:35:48 jon Exp $
#
# Script to classify an irreducible representation
#
# Inputs
# $1: generator a
# $2: generator b
#
# outputs will be of the form irred/${nor}_${i}_{1,2}
# where nor = znor $a and i is an available unused index
#
#
# Return codes
# 1: error in parameters
# 0: new irreducible
# 254: no nullity one element found
# 255: existing irreducible
#
usage="$0: usage: $0 <a> <b>"
if [ $# -ne 2 ]; then
  echo $usage
  exit 1;
fi
. functions
a=$1
b=$2
if [ -e $a -a -e $b ]; then
  q=`zprime $a`
  nor=`znor $a`
  noc=`znoc $a`
  if [ $nor -ne $noc ]; then
    echo "$0: $a is not square"
    exit 1
  fi
  if [ $nor -ne `znor $b` -o $nor -ne `znoc $b` ]; then
    echo "$0: $a and $b are not compatible"
    exit 1
  fi
else
  echo "$0: missing files $a or $b"
  exit 1
fi
id=id_${q}_$nor
if [ ! -e $id ]; then
  echo Creating id
  zid $q $nor $nor $id
fi
#
# Now search for element of nullity one
#
tmp=tmp${PPID}
ok=0
memory=200
for i in 1 2 3 4 5 6 7 8 9 10; do
  f$i $id $a $b ${tmp}.1 ${tmp}.1
  if [ $? -ne 0 ]; then
    rm -f ${tmp}*
    exit 1
  fi
  r=`zrn ${tmp}.1 $memory 2>/dev/null`
  ret=$?
  while [ $ret -eq 2 ]; do
    let memory=`more_memory $memory`
    r=`zrn ${tmp}.1 $memory 2>/dev/null`
    ret=$?
  done
  if [ $ret -ne 0 ]; then
    rm -f ${tmp}*
    exit 1
  fi
  let s=$r+1
  if [ $s -eq $nor ]; then
    ok=1
    break
  fi
done
e=${tmp}.1
if [ $ok -eq 0 ]; then
# Try zsums
# First compute o_a and o_b
  o_a=`order $a`
  ret=$?
  if [ 0 -ne $ret ]; then
    echo Cannot compute order of $a
    exit 1
  fi
  o_b=`order $b`
  ret=$?
  if [ 0 -ne $ret ]; then
    echo Cannot compute order of $b
    exit 1
  fi
  while [ $ok -eq 0 ]; do
    out=`zsums $a $b ${tmp}.zsums $o_a $o_b 10 $memory`
    ret=$?
    if [ 2 -eq $ret ]; then
      let memory=`more_memory $memory`
    elif [ 0 -eq $ret ]; then
      ok=1
      name=`echo $out | sed -e "s/^.*element //g;s/ of nullity.*$//g"`
      mv ${name} ${tmp}.1
    else
      echo Failed to find an element of nullity one
      rm -f ${tmp}*
      exit 254
    fi
  done
fi
name=${tmp}_${nor}
#echo base $e $a $b ${name}
base $e $a $b ${name}
ret=$?
if [ $ret -ne 0 ]; then
  echo base returns $ret, terminating
  rm -f ${tmp}*
  exit 1
fi
names=`ls irreds/${nor}_*_1 2>/dev/null`
ret=$?
if [ $ret -eq 0 ]; then
# echo Found some irreducibles
# Some irreds of this dimension
  for x in $names; do
    y=`echo $x | sed -e "s/_1$//g"`
    if diff ${y}_1 ${name}_sb_1 1>/dev/null; then
      if diff ${y}_2 ${name}_sb_2 1>/dev/null; then
#       echo Found a matching irreducible
        rm -f ${tmp}*
        exit 255
      fi
    fi
  done
fi
#
# New irreducible found
#
echo Found a new irreducible of dimension ${nor}
new_name=`new_irred_name irreds/${nor}`
#echo assigning new name ${new_name}
mv ${name}_sb_1 ${new_name}_1
mv ${name}_sb_2 ${new_name}_2
rm -f ${tmp}*
exit 0
