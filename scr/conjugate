#!/bin/sh
#
# $Id: conjugate,v 1.1 2002/07/03 12:11:46 jon Exp $
#
# Script to conjugate elements into another base
#
# Inputs
# $1: element with which to conjugate
# $2: base name for output elements
# $3-: generators
#
# outputs will be of the form <$3>_{1,...}
#
# Return codes
# 1: error in parameters
# 0: success
#
#set -v
. functions
usage="$0: usage: $0 <e> <output_stem> <elements>"
if [ $# -lt 3 ]; then
  echo $usage
  exit 1;
fi
e=$1
o=$2
a=$3
if [ -e $e -a -e $a ]; then
  q=`zprime $a`
  nor=`znor $a`
  noc=`znoc $a`
  if [ $nor -ne $noc ]; then
    echo "$0: $a is not square"
    exit 1
  fi
  if [ $nor -ne `znoc $e` -o $nor -ne `znor $e` ]; then
    echo "$0: $a and $e are not compatible"
    exit 1
  fi
else
  echo "$0: missing files $e, $a"
  exit 1
fi
tmp=tmp${PPID}
memory=200
ok=0
while [ 0 -eq $ok ]; do
  ziv $e ${tmp}.2 $memory 2>/dev/null
  ret=$?
  if [ $ret -eq 2 ]; then
    let memory=`more_memory $memory`
  elif [ $ret -eq 0 ]; then
    ok=1
  else
    echo ziv unexpectedly returns $ret
    rm -f ${tmp}*
    exit $ret
  fi
done
shift 2
i=1
for x in $*; do
  zmu $e $x ${tmp}.3 $memory
  zmu ${tmp}.3 ${tmp}.2 ${o}_$i $memory
  ret=$?
  if [ 0 -ne $ret ]; then
    rm -f ${tmp}*
    exit $ret
  fi
  let i=$i+1
done
rm -f ${tmp}*
exit 0
