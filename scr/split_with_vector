#
# $Id: split_with_vector,v 1.4 2002/02/21 20:37:21 jon Exp $
#
# Script to split a representation given a particular vector to work from
#
# Inputs
# $1: generator a
# $2: generator b
# $3: vector with which to split
# $4: output filename base
# $5: initial memory (optional)
#
# outputs will be of the form <$3>_<q>_<nor>_{1,2}
# where nor is number of rows, and q is the prime power
#
#
# Return codes
# 1: error in parameters
# 0: success
# 254: did not split
#
. functions
usage="$0: usage: $0 <a> <b> <v> <output_stem> [<memory>]"
if [ $# -ne 4 -a $# -ne 5 ]; then
  echo $usage
  exit 1;
fi
a=$1
b=$2
v=$3
o=$4
if [ $# -eq 5 ]; then
  memory=$5
else
  memory=200
fi
if [ -e $a -a -e $b -a -e $v ]; then
  q=`zprime $a`
  nor=`znor $a`
  noc=`znoc $a`
  if [ $nor -ne $noc ]; then
    echo "$0: $a is not square"
    exit 1
  fi
  if [ $nor -ne `znor $b` -o $nor -ne `znoc $b` ]; then
    echo "$0: $a and $b are not compatible"
    exit 1
  fi
  if [ $noc -ne `znoc $v` -o $q -ne `zprime $v` ]; then
    echo "$0: $a and $v are not compatible"
    exit 1
  fi
else
  echo "$0: missing files $a, $b or $v"
  exit 1
fi
tmp=tmp${PPID}
mem_ok=0
while [ 0 -eq $mem_ok ]; do
  dim=`zsp $v ${tmp}.5 $a $b $memory 2>/dev/null`
  ret=$?
  if [ $ret -eq 0 ]; then
    mem_ok=1
  else
    if [ $ret -eq 2 ]; then
      let memory=`more_memory $memory`
    else
      rm -f ${tmp}*
      exit 1
    fi
  fi
done
let codim=$nor-$dim
if [ $dim -lt $nor ]; then
  ss_name=`new_name ${o} ${nor} ${dim}`
  qs_name=`new_name ${o} ${nor} ${codim}`
  if [ $dim -eq $codim ]; then
    ss_name=${ss_name}_a
    qs_name=${qs_name}_b
  fi
  echo Obtained a subspace ${ss_name} of dimension $dim, quotient ${qs_name} codimension $codim
else
  echo failed to split
  rm -f ${tmp}*
  exit 254
fi
split_with_subspace $a ${tmp}.5 ${ss_name}_1 ${qs_name}_1
split_with_subspace $b ${tmp}.5 ${ss_name}_2 ${qs_name}_2
rm -f ${tmp}*
exit 0
