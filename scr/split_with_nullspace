#
# $Id: split_with_nullspace,v 1.1 2002/02/27 19:06:17 jon Exp $
#
# Script to split a representation given a particular subspace of vectors to work from
#
# Inputs
# $1: generator a
# $2: generator b
# $3: nullspace with which to split
# $4: output filename base
#
# outputs will be of the form <$3>_<q>_<nor>_{1,2}
# where nor is number of rows, and q is the prime power
#
#
# Return codes
# 1: error in parameters
# 0: success
# 253: nullity 0
# 254: did not split
#
. functions
usage="$0: usage: $0 <a> <b> <n> <output_stem>"
if [ $# -ne 4 ]; then
  echo $usage
  exit 1;
fi
a=$1
b=$2
n=$3
o=$4
c=$5
if [ -e $a -a -e $b -a -e $n ]; then
  q=`zprime $a`
  nor=`znor $a`
  noc=`znoc $a`
  if [ $nor -ne $noc ]; then
    echo "$0: $a is not square"
    exit 1
  fi
  if [ $nor -ne `znor $b` -o $nor -ne `znoc $b` ]; then
    echo "$0: $a and $b are not compatible"
    exit 1
  fi
  if [ $noc -ne `znoc $n` -o $q -ne `zprime n` ]; then
    echo "$0: $a and $n are not compatible"
    exit 1
  fi
else
  echo "$0: missing files $a, $b or $n"
  exit 1
fi
tmp=tmp${PPID}
memory=200
ok=0
nullity=`znor $n`
while [ 0 -eq $ok ];
  rn=`zrn $n`
  ret=$?
  if [ 0 -eq $ret ]; then
    ok=1
    if [ $rn -ne $nullity ]; then
      echo $n contains dependent vectors, exiting
      exit 1
    fi
  elif [ 2 -eq $ret ]; then
    let memory=`more_memory $memory`
  else
    rm -f ${tmp}*
    exit 1
  fi
done
echo nullity $nullity
if [ $nullity -eq 0 ]; then
  echo Failed to split
  rm -f ${tmp}*
  exit 253
fi
ok=0
count=$nullity
if [ $count -gt 5 ]; then
  echo Restricting span to 5 vectors
  count=5
fi
#echo Considering $vectors vectors
zspan $n ${tmp}.3 $count
if [ $? -ne 0 ]; then
  rm -f ${tmp}*
  exit 1
fi
vectors=`znor ${tmp}.3`
vector=0;
while [ $vector -lt $vectors ]; do
  split=0
#
# Pick vector $vector from ${tmp}.3 and attempt to spin
#
#  echo Trying vector $vector
  zsel ${tmp}.3 ${tmp}.4 $vector
  mem_ok=0
  while [ 0 -eq $mem_ok ]; do
    dim=`zsp ${tmp}.4 ${tmp}.5 $a $b $memory 2>/dev/null`
    ret=$?
    if [ $ret -eq 0 ]; then
      mem_ok=1
    else
      if [ $ret -eq 2 ]; then
        let memory=`more_memory $memory`
#       echo Allocating more memory for zsp, now $memory
      else
        rm -f ${tmp}*
        exit 1
      fi
    fi
  done
  let vector=$vector+1
  if [ $dim -lt $nor ]; then
    split=1
    break
  fi
  echo Resplitting with vector $vector
done
let codim=$nor-$dim
if [ $split -ne 0 ]; then
  ss_name=`new_name ${o} ${nor} ${dim}`
  qs_name=`new_name ${o} ${nor} ${codim}`
  if [ $dim -eq $codim ]; then
    ss_name=${ss_name}_a
    qs_name=${qs_name}_b
  fi
  echo Obtained a subspace ${ss_name} of dimension $dim, quotient ${qs_name} codimension $codim
else
# Failed to split
  rm -f ${tmp}*
  exit 254
fi
split_with_subspace $a ${tmp}.5 ${ss_name}_1 ${qs_name}_1 $memory
split_with_subspace $b ${tmp}.5 ${ss_name}_2 ${qs_name}_2 $memory
rm -f ${tmp}*
exit 0
