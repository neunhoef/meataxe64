#!/bin/sh
#
# $Id: sym_basis,v 1.4 2002/09/05 18:18:57 jon Exp $
#
# Script to compute a symmetry basis wrt an ordered set of irreducibles
#
# Inputs
# $1: a file containing the irreducible element names
# $2: memory to be used
# $3: the file to contain the symmetry basis
# $4: the file of multiplicities
# $5: whether to use the dual (0 => not, 1 => dual)
# $6: a script for computing gamma operators
# $7-: generators for the condensation group
#
# Return codes
# 1: error in parameters
# 0: success
# 255: an irreducible was found outside the list
#
usage="$0: usage: $0 <irreducibles> <memory> <output basis> <output multiplicities> <dualise> <script> <generator 1> [<other generators>]"
if [ $# -lt 8 ]; then
  echo $usage
  exit 1;
fi
have_basis=0
name=$0
irreds=$1
memory=$2
out=$3
mult=$4
dualise=$5
script=$6
shift 6
gen_count=$#
tmp=tmp${PPID}
basis=${tmp}.31
cat /dev/null > $mult
for x in `cat $irreds`; do
#
# TODO: cope with dual here
# TODO: dualise x, classify, reset x and then continue
#
  dim=`znor ${x}_1`
  y=`ls ${x}_1_I*`
  ret=$?
  if [ 0 -ne $ret ]; then
    echo "$name: failed to find irreducible script for $x, terminating"
    exit 1
  fi
  count=0
  gamma=${tmp}.0
# compute the gamma operator in the generators for irreducible X
  $script $gen_count $x $memory $gamma $*
  ret=$?
  if [ 0 -ne $ret ]; then
    echo "$name: gamma operator computation failed for $x, terminating"
    exit 1
  fi
# compute the image of the gamma operator
  dim=`zbase $gamma . ${tmp}.1 $memory`
  ret=$?
  if [ 0 -ne $ret ]; then
    rm -f ${tmp}.*
    echo "$name: failed to compute dim, terminating"
    exit 1
  fi
  if [ $dim -gt 0 ]; then
    y=0
    while [ $y -lt $dim ]; do
      zsel ${tmp}.1 ${tmp}.2 $y
      ret=$?
      if [ 0 -ne $? ]; then
        rm -f ${tmp}.*
        echo "$name: zsel failed, terminating"
        exit 1
      fi
# See if vector already in space
      if [ 0 -ne $have_basis ]; then
        zjoin $basis ${tmp}.2 ${tmp}.3
        ret=$?
        if [ 0 -ne $ret ]; then
          rm -f ${tmp}.*
          echo "$name: zjoin failed, terminating"
          exit 1
        fi
        r=`zrn ${tmp}.3 $memory`
        ret=$?
        if [ 0 -ne $ret ]; then
          rm -f ${tmp}.*
          echo $r
          echo "$name: zrn failed, terminating"
          exit 1
        fi
        if [ `znor $basis` -eq $r ]; then
# This one already in the space, so ignore it
          let y=$y+1
          continue
        fi
      fi
# Otherwise, spin up, create subspace, do sb, add vectors
      d=`zmsp ${tmp}.2 ${tmp}.3 $memory $*`
      ret=$?
      if [ 0 -ne $ret ]; then
        rm -f ${tmp}.*
        echo $d
        echo "$name: failed to spin vector $y, terminating"
        exit 1
      fi
      if [ $d -ne `znor ${x}_1` ]; then
        rm -f ${tmp}.*
        echo "$name: vector $y spins to an incorrect subspace, terminating"
        exit 1
      fi
      z=1
      names=
      for a in $*; do
        zmu ${tmp}.3 $a ${tmp}.4 $memory
        zss ${tmp}.3 ${tmp}.4 ${tmp}.5_$z
        names="$names ${tmp}.5_$z"
        let z=$z+1
      done
      r=`new_irred $memory $names`
      ret=$?
      if [ 0 -eq $ret ]; then
        rm -f ${tmp}.*
        echo "$name: new unknown irreducible found, terminating"
        exit 255
      elif [ 1 -eq $ret ]; then
        rm -f ${tmp}.*
        echo "$name: failure in new_irred, terminating"
        exit 1
      elif [ 255 -ne $ret ]; then
        rm -f ${tmp}.*
        echo "$name: unexpected return $ret from new_irred, terminating"
        exit 1
      fi
      irr=`echo $r | sed -e "s/Existing irreducible //g;s/ found//g"`
      if [ "$irr" != "$x" ]; then
        rm -f ${tmp}.*
        echo "$name: vector $y spins to an incorrect subspace, terminating"
        exit 1
      fi
# Need to convert our non-standard basis in ${tmp}.3 to a standard basis as per the irreducibles
# Use the script associated with irreducible x
      z=`ls ${x}_1_I*`
      ret=$?
      if [ 0 -ne $ret ]; then
        echo "$name: failed to find irreducible script for $x, terminating"
        rm -f ${tmp}.*
        exit 1
      fi
      script_x=`echo $z | sed -e "s?${x}_1_??g"`
      ret=$?
      if [ 0 -ne $ret ]; then
        echo "$name: failed to produce irreducible script for $x, terminating"
        rm -f ${tmp}.*
        exit 1
      fi
      zscript ${tmp}.5_1 ${tmp}.5_2 ${tmp}.6 ${tmp}.zscript $script_x $memory
      ret=$?
      rm -f ${tmp}.zscript*
      if [ 0 -ne $ret ]; then
        rm -f ${tmp}.*
        echo "$name: failed to apply script to ${tmp}.6_1 ${tmp}.6_2, terminating"
        exit 1
      fi
      n=`zns ${tmp}.6 ${tmp}.7 $memory`
      ret=$?
      if [ 0 -ne $ret ]; then
        echo "$name: zns failed with code $ret, terminating"
        rm -f ${tmp}.*
        exit 1
      fi
       zsel ${tmp}.7 ${tmp}.8 0
      ret=$?
      if [ 0 -ne $ret ]; then
        echo "$name: zsel failed with code $ret, terminating"
        rm -f ${tmp}.*
        exit 1
      fi
      base_from_vector ${tmp}.8 ${tmp}.8_sb ${tmp}.4 $names
      ret=$?
      if [ 1 -eq $ret ]; then
        echo "$name: base_from_vector failed, terminating"
        rm -f ${tmp}.*
        exit 1
      elif [ 0 -ne $ret ]; then
        echo "$name: base_from_vector unexpectedly returns $ret, terminating"
        rm -f ${tmp}.*
        exit 1
      fi
      zmu ${tmp}.4 ${tmp}.3 ${tmp}.5
      rm ${tmp}.4
# ${tmp}.5 is a standard basis for this irreducible piece
      if [ 0 -eq $have_basis ]; then
        cp ${tmp}.5 $basis
        have_basis=1
      else
        zjoin $basis ${tmp}.5 ${tmp}.4
        cp ${tmp}.4 $basis
      fi
      ret=$?
      if [ 0 -ne $ret ]; then
        rm -f ${tmp}.*
        echo "$name: unexpected failure in zjoin, terminating"
        exit 1
      fi
      let count=$count+1
      let y=$y+1
    done
  fi
  echo $count >> $mult
done
if [ 0 -eq $have_basis ]; then
  rm -f ${tmp}.*
  echo "$name: no basis found, terminating"
  exit 1
fi
if [ `znor $basis` -ne `znor $1` ]; then
  rm -f ${tmp}.*
  echo "$name: not enough basis found"
  exit 255
fi
cp $basis $out
rm -f ${tmp}.*
exit 0
