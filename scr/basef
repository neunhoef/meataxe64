#!/bin/sh
#
# $Id: basef,v 1.5 2002/06/25 10:30:12 jon Exp $
#
# Script to find a representation in standard base
# using intermediate files
#
# Inputs
# $1: element with which to split
# $2: generator a
# $3: generator b
# $4: output filename base
# $5: the standard basis
# $6: temporary directory to be used
# $7: memory (optional)
#
# outputs will be of the form <$4>_sb_{1,2}
# where nor is number of rows, and q is the prime power
#
#
# Return codes
# 1: error in parameters
# 0: success
# 254: reducible
# 255: nullity not 1
#
#set -v
. functions
usage="$0: usage: $0 <e> <a> <b> <output_stem> <s> <tmp directory> [<memory>]"
if [ $# -ne 6 -a $# -ne 7 ]; then
  echo $usage
  exit 1;
fi
e=$1
a=$2
b=$3
o=$4
s=$5
dir=$6
if [ 7 -eq $# ]; then
  memory=$7
else
  memory=200
fi
if [ -e $e -a -e $a -a -e $b ]; then
  q=`zprime $a`
  nor=`znor $a`
  noc=`znoc $a`
  if [ $nor -ne $noc ]; then
    echo "$0: $a is not square"
    exit 1
  fi
  if [ $nor -ne `znor $b` -o $nor -ne `znoc $b` ]; then
    echo "$0: $a and $b are not compatible"
    exit 1
  fi
  if [ $nor -ne `znoc $e` -o $nor -ne `znor $e` ]; then
    echo "$0: $a and $e are not compatible"
    exit 1
  fi
else
  echo "$0: missing files $e, $a or $b"
  exit 1
fi
tmp=tmp${PPID}
basef_vectors $e $a $b $s $dir $memory
ret=$?
if [ 0 -ne $ret ]; then
  exit $ret
fi
zivf $s ${tmp}.2 $dir $memory 2>/dev/null
ret=$?
if [ 0 -ne $ret ]; then
  echo zivf unexpectedly returns $ret
  rm -f ${tmp}*
  exit $ret
fi
zmu $s $a ${tmp}.3 $memory
zmu ${tmp}.3 ${tmp}.2 ${o}_sb_1 $memory
zmu $s $b ${tmp}.4 $memory
zmu ${tmp}.4 ${tmp}.2 ${o}_sb_2 $memory
rm -f ${tmp}*
