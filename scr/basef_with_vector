#!/bin/sh
#
# $Id: basef_with_vector,v 1.1 2002/07/04 17:56:46 jon Exp $
#
# Script to find a standard base for a representation, given a vector
#
# Inputs
# $1: vector with which to split
# $2: generator a
# $3: generator b
# $4: the standard basis
# $5: temporary directory
# $6: memory
#
#
#
# Return codes
# 1: error in parameters
# 0: success
# 254: reducible
#
#set -v
. functions
usage="$0: usage: $0 <e> <a> <b> <s> <tmp dir> <memory>"
if [ $# -ne 6 ]; then
  echo $usage
  exit 1;
fi
e=$1
a=$2
b=$3
s=$4
dir=$5
if [ -e $e -a -e $a -a -e $b ]; then
  q=`zprime $a`
  nor=`znor $a`
  noc=`znoc $a`
  if [ $nor -ne $noc ]; then
    echo "$0: $a is not square"
    exit 1
  fi
  if [ $nor -ne `znor $b` -o $nor -ne `znoc $b` ]; then
    echo "$0: $a and $b are not compatible"
    exit 1
  fi
  if [ $noc -ne `znoc $e` -o 1 -ne `znor $e` ]; then
    echo "$0: $a and $e are not compatible"
    exit 1
  fi
else
  echo "$0: missing files $e, $a or $b"
  exit 1
fi
tmp=tmp${PPID}
memory=$6
dim=`zsbf $e $s $a $b $dir $memory`
ret=$?
if [ 0 -eq $ret ]; then
  if [ $dim -ne $nor ]; then
    echo Strange result from zsb giving wrong dimension $dim vs $nor
    rm -f ${tmp}*
    exit 1
  fi
else
  echo zsbf unexpectedly returns $ret
  rm -f ${tmp}*
  exit 1
fi
rm -f ${tmp}*
exit 0
