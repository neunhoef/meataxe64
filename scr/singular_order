#!/bin/sh
#
# $Id: singular_order,v 1.4 2002/10/13 14:16:08 jon Exp $: f1,v 1.2 2001/12/01 10:46:02 jon Exp $
#
# Script to compute number of distinct powers of a matrix, in a naive fashion
# Terminates at 5
#
# Inputs
# $1: matrix
#
# Return codes
# 1: error in parameters
# 0: success
# 255: element is zero
#
. functions
usage="$0: usage: $0 <in>"
if [ $# -ne 1 ]; then
  echo "$usage"
  exit 1;
fi
a=$1
if [ -e $a ]; then
  q=`zprime $a`
  nor=`znor $a`
  noc=`znoc $a`
  if [ $nor -ne $noc ]; then
    echo "$0: $a is not square"
    exit 1
  fi
else
  echo "$0: missing file $a"
  exit 1
fi
memory=200
ok=0
while [ $ok -eq 0 ]; do
  r=`zrn $a $memory 2>/dev/null`
  ret=$?
  if [ $ret -eq 2 ]; then
    let memory=`more_memory $memory`
  elif [ $ret -eq 0 ]; then
    ok=1
  else
    echo "rank failed on $a, exiting"
    exit 1
  fi
done
tmp=tmp${PPID}
o=1
ok=0
t=$a
if [ $r -ne $nor ]; then
  if [ 0 -eq $r ]; then
    echo $a is zero
    exit 255
  fi
  while [ $ok -eq 0 -a $o -lt 5 ]; do
    zmu -m 400 $a $t ${tmp}.$o 1>/dev/null
    ret=$?
    if [ 0 -ne $ret ]; then
      rm -f ${tmp}*
      exit 1
    fi
    t=${tmp}.$o
    s=`zrn $t $memory 2>/dev/null`
    ret=$?
    if [ 0 -ne $ret ]; then
      echo zrn failed on power of $a, exiting
      rm -f ${tmp}*
      exit 1
    fi
    let o=$o+1
    if [ $s -eq $r ]; then
      echo $o
      rm -f ${tmp}*
      exit 0
    fi
    r=$s
  done
else
  id=id_${q}_$nor
  if [ ! -e $id ]; then
    zid $q $nor $nor $id
  fi
  if zdiff $a $id 1>/dev/null ; then
    echo 1
    exit 0
  fi
  while [ $ok -eq 0 -a $o -lt 5 ]; do
    if zdiff $t $id 1>/dev/null ; then
      echo $o
      rm -f ${tmp}*
      exit 0
    fi
    zmu -m 400 $a $t ${tmp}.$o 1>/dev/null
    ret=$?
    if [ 0 -ne $ret ]; then
      rm -f ${tmp}*
      exit 1
    fi
    t=${tmp}.$o
    let o=$o+1
  done
fi
rm -f ${tmp}*
echo 5
