#
# $Id: split,v 1.1 2001/11/29 01:13:09 jon Exp $
#
# Script to split a representation
#
# Inputs
# $1: generator a
# $2: generator b
# $3: output filename base
#
# outputs will be of the form <$3>_<q>_<nor>_{1,2}
# where nor is number of rows, and q is the prime power
#
#
# Return codes
# 1: error in parameters
# 0: success
# 256: failed to split
#
usage="$0: usage: $0 <a> <b> <output_stem>"
if [ $# -ne 3 ]; then
  echo $usage
  exit 1;
fi
a=$1
b=$2
o=$3
if [ -e $a -a -e $b ]; then
  q=`zprime $a`
  nor=`znor $a`
  noc=`znoc $a`
  if [ $nor -ne $noc ]; then
    echo "$0: $a is not square"
    exit 1
  fi
  if [ $nor -ne `znor $b` -o $nor -ne `znoc $b` ]; then
    echo "$0: $a and $b are not compatible"
    exit 1
  fi
else
  echo "$0: missing files $a or $b"
  exit 1
fi
id=id_${q}_$nor
if [ ! -e $id ]; then
  echo Creating id
  zid $q $nor $nor $id
fi
#
# Now look for something with nullity
#
tmp=tmp${PPID}
rm -f ${tmp}*
#
# Try 1 + a + b
#
f1 $id $a $b ${tmp}.1 ${tmp}.1
if [ $? -ne 0 ]; then
  exit 1
fi
memory=200
ok=0
nullity=0
while [ 0 -eq $ok ]; do
  nullity=`zns ${tmp}.1 ${tmp}.2 $memory`
  ret=$?
  if [ $ret -eq 0 ]; then
    ok=1
  else
    if [ $ret -eq 2 ]; then
      let memory=$memory*2
      echo Allocating more memory for zns, now $memory
    else
      exit 1
    fi
  fi
done
echo nullity $nullity
if [ $nullity -eq 0 ]; then
  echo Failed to split
  exit 256
fi
#
# Todo: try other f scripts
#
ok=0
count=$nullity
if [ $count -ge 5 ]; then
  echo Restricting span to 5 vectors
  count=5
fi
let vectors=$q**$count-1
echo Considering $vectors vectors
zspan ${tmp}.2 ${tmp}.3 $count
if [ $? -ne 0 ]; then
  exit 1
fi
vector=0;
while [ $vector -lt $vectors ]; do
split=0
#
# Pick vector $vector from ${tmp}.3 and attempt to spin
#
  echo Trying vector $vector
  zsel ${tmp}.3 ${tmp}.4 $vector
  mem_ok=0
  while [ 0 -eq $mem_ok ]; do
    dim=`zsp ${tmp}.4 ${tmp}.5 $a $b $memory`
    ret=$?
    if [ $ret -eq 0 ]; then
      mem_ok=1
    else
      if [ $ret -eq 2 ]; then
        let memory=$memory*2
        echo Allocating more memory for zsp, now $memory
      else
        exit 1
      fi
    fi
  done
  let vector=$vector+1
  if [ $dim -lt $nor ]; then
    split=1
    break
  fi
  echo Resplitting with vector $vector
done
let codim=$nor-$dim
if [ $split -ne 0 ]; then
  echo Obtained a subspace of dimension $dim, codimension $codim
else
  echo suspect irreducible
  exit 256  
fi
let memory=$memory*4
ss_name=${o}_${nor}_${dim}
qs_name=${o}_${nor}_${codim}
zmu ${tmp}.5 $a ${tmp}.6
zss ${tmp}.5 ${tmp}.6 ${ss_name}_1 $memory
zmu ${tmp}.5 $b ${tmp}.6
zss ${tmp}.5 ${tmp}.6 ${ss_name}_2 $memory
zqs ${tmp}.5 $a ${qs_name}_1 $memory
zqs ${tmp}.5 $b ${qs_name}_2 $memory
#rm -f ${tmp}*
