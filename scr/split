#!/bin/sh
#
# $Id: split,v 1.26 2021/04/25 09:18:39 jon Exp $
#
# Script to split a representation
#
# Inputs
# $1: output filename base
# $2: ignore pathology
# $3: vectors (may not exist)
# $4: subspace (may not exist)
# $5: generator a
# $6-: other generators
#
# outputs will be of the form <$4>_<q>_<nor>_$x
# where nor is number of rows, and q is the prime power
#
#
# Return codes
# 1: error in parameters
# 0: success
# 252: ran out of possible splitters
# 254: failed to split
# 255: irreducible
#
#set -v
. functions
usage="$0: usage: $0 <output_stem> <ignore pathology> <vectors> <subspace> <a> [<other generators>]"
if [ $# -lt 5 ]; then
  echo "$usage"
  exit 1;
fi
a=$5
o=$1
path=$2
vectors=$3
subspace=$4
shift 5
if [ -e $a ]; then
  q=`zprime $a`
  nor=`znor $a`
  noc=`znoc $a`
  if [ $nor -ne $noc ]; then
    echo "$0: $a is not square"
    exit 1
  fi
else
  echo "$0: missing file $a"
  exit 1
fi
if [ 1 -eq $nor ]; then
# No point in further work on irreducibles
  exit 255
fi
id=id_${q}_$nor
if [ ! -e $id ]; then
  zid $q $nor $nor $id
fi
#
# Now look for something with nullity
#
tmp=tmp${PPID}
#
# Try 1 + a + b etc
#
b=$1
for i in 1 2 3 4 5 6 7 8 9 10; do
  echo using f$i to split
  f$i $id $a $b ${tmp}.1 ${tmp}.1
  if [ $? -ne 0 ]; then
    rm -f ${tmp}*
    exit 1
  fi
  split_with_element ${tmp}.1 $o 0 $path ${subspace} ${vectors} $a $*
  ret=$?
# Only loop on nullity 0 or didn't split
  if [ $ret -ne 253 -a $ret -ne 254 ]; then
    rm -f ${tmp}*
    exit $ret
  fi
done
# If any generators are singular, try them
for x in $a $*; do
  echo "using $x to split"
  split_with_element $x $o 0 $path ${subspace} ${vectors} $a $*
  ret=$?
# Only loop on nullity 0 or didn't split
  if [ $ret -ne 253 -a $ret -ne 254 ]; then
    rm -f ${tmp}*
    exit $ret
  fi
done
echo searching for suitable element using zsums
i=0
for x in $a $*; do
  order=`singular_order $x`
  ret=$?
  if [ 1 -eq $ret ]; then
    echo Cannot compute order of $x
    rm -f ${tmp}*
    exit 1
  fi
  if [ 0 -eq $ret ]; then
    orders[$i]=$order
    y[$i]=$x
    let i=$i+1
  elif [ 255 -eq $ret ]; then
    continue
  else
    echo singular_order returns unexpected code $ret
    rm -f ${tmp}*
    exit 1
  fi
done
memory=200000
q=1
for x in $a $b $*; do
  r=`zprime $x`
  if [ $r -gt $q ]; then
    q=$r
    break
  fi
done
depth=`max_depth $q 65536`
max_null=5
if [ 2 -eq $q ]; then
  max_null=30
elif [ 3 -le $q ]; then
  max_null=15
fi
# Don't use nullity above dimension, there's no point
if [ $max_null -gt $nor ]; then
    max_null=$nor
fi
elements_and_orders=
i=0
for x in $a $*; do
  elements_and_orders="$elements_and_orders ${y[$i]} ${orders[$i]}"
  let i=$i+1
done
null=5
# Ensure we go once round the loop  
if [ $null -gt $max_null ]; then
    null=$max_null
fi
while [ $null -le $max_null ]; do
  echo Trying zsums with nullity $null
  echo zsums -m $memory ${tmp}.zsums $depth $null $elements_and_orders
  out=`zsums -m $memory ${tmp}.zsums $depth $null $elements_and_orders 2>/dev/null`
  ret=$?
  if [ 2 -eq $ret ]; then
    let memory=`more_memory $memory`
  elif [ 0 -eq $ret ]; then
    name=`echo $out | sed -e "s/^.*element //g;s/ of nullity.*$//g"`
    split_with_element ${name} $o 0 0 ${subspace} ${vectors} $a $*
    ret=$?
    if [ $ret -eq 255 -o $ret -eq 0 ]; then
      rm -f ${tmp}*
      exit $ret
    fi
    let null=$null+5
  elif [ 255 -eq $ret ]; then
    if [ $null -ge $max_null ]; then
      echo "Failed to find an element of nullity <= $max_null"
    fi
    let null=$null+5
  else
    echo zsums unexpectedly returns $ret, terminating
    rm -f ${tmp}*
    exit 1
  fi
done
ok=0
let max_null=$nor-1
echo searching for any element using zsums
while [ $ok -eq 0 ]; do
  out=`zsums -m $memory ${tmp}.zsums $depth $max_null $elements_and_orders 2>/dev/null`
  ret=$?
  if [ 2 -eq $ret ]; then
    let memory=`more_memory $memory`
  elif [ 0 -eq $ret ]; then
    ok=1
    name=`echo $out | sed -e "s/^.*element //g;s/ of nullity.*$//g"`
    split_with_element ${name} $o 0 0 ${subspace} ${vectors} $a $*
    ret=$?
    if [ $ret -eq 255 -o $ret -eq 0 ]; then
      rm -f ${tmp}*
      exit $ret
    fi
  elif [ 255 -eq $ret ]; then
    echo "Failed to find an element of low nullity"
    break
  else
    echo zsums unexpectedly returns $ret, terminating
    rm -f ${tmp}*
    exit 1
  fi
done
echo trying zero
while [ $ok -eq 0 ]; do
  zsid $q $nor $nor 0 ${tmp}_zero
  ret=$?
  if [ 2 -eq $ret ]; then
    let memory=`more_memory $memory`
  elif [ 0 -eq $ret ]; then
    ok=1
    split_with_element ${tmp}_zero $o 0 0 ${subspace} ${vectors} $a $*
    ret=$?
    if [ $ret -eq 255 -o $ret -eq 0 ]; then
      rm -f ${tmp}*
      exit $ret
    fi
  else
    echo "Failed to split with zero"
    rm -f ${tmp}*
    exit 254
  fi
done
rm -f ${tmp}*
exit 252
