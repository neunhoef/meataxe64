#!/bin/sh
#
# $Id: indicate_with_script,v 1.7 2002/09/12 11:47:28 jon Exp $
#
# Script to find the indicator of an irreducible representation,
# given a script describing the null generator
# Assumes a and b in standard base form
#
# Inputs
# $1: script for finding standard base generator
# $2: initial memory (optional)
# $3: generator a
# $4: order a
# $5: generator b
# $6: order b
# $7-: other generators and orders
#
# Return codes
# 1: error in parameters
# 0: ok
#
usage="$0: usage: $0 <script> <memory> <a> <order a> <b> <order b> [<other generators and orders>]"
if [ $# -lt 6 ]; then
  echo "$usage"
  exit 1;
fi
. functions
script=$1
memory=$2
a=$3
b=$5
o_a=$4
o_b=$6
shift 2
if [ -e $a -a -e $b ]; then
  q=`zprime $a`
  nor=`znor $a`
  noc=`znoc $a`
  if [ $nor -ne $noc ]; then
    echo "$0: $a is not square"
    exit 1
  fi
  if [ $nor -ne `znor $b` -o $nor -ne `znoc $b` ]; then
    echo "$0: $a and $b are not compatible"
    exit 1
  fi
else
  echo "$0: missing files $a or $b"
  exit 1
fi
tmp=tmp${PPID}
i=1
line=
duals=
while [ $# -gt 0 ]; do
  if [ 1 -eq $# ]; then
    rm -f ${tmp}.*
    echo "$usage"
    exit 1
  fi
  duals="$duals ${tmp}.$i"
  dual_with_order $1 ${tmp}.$i $2 $memory
  line="$line $1 ${tmp}.$i"
  let i=$i+1
  shift 2
done
e=${tmp}.e
ok=0
while [ $ok -eq 0 ]; do
  zscript $e ${tmp}zscript $script $memory $duals
  ret=$?
  if [ $ret -eq 2 ]; then
    let memory=`more_memory $memory`
  elif [ $ret -ne 0 ]; then
    echo zscript failed
    rm -f ${tmp}.*
    exit $ret
  else
    ok=1
  fi
done
rm ${tmp}zscript*
indicate_with_element $e $script $memory $line
ret=$?
rm -f ${tmp}.*
exit $ret

