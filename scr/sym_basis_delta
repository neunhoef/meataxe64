#!/bin/sh
#
# $Id: sym_basis_delta,v 1.2 2003/05/31 20:50:30 jon Exp $
#
# Script to compute a symmetry basis wrt an ordered set of irreducibles,
# using delta words
#
# Inputs
# $1: a file containing the irreducible element names
# $2: memory to be used
# $3: the file to contain the symmetry basis
# $4: the file of multiplicities
# $5: whether to use the dual (0 => not, 1 => dual)
# $6: the file of delta word scripts
# $7-: generators for the condensation group
#
# Return codes
# 1: error in parameters
# 0: success
# 255: an irreducible was found outside the list
#
usage="$0: usage: $0 <irreducibles> <memory> <output basis> <output multiplicities> <dualise> <script> <generator 1> [<other generators>]"
if [ $# -lt 8 ]; then
  echo "$usage"
  exit 1;
fi
have_basis=0
name=$0
irreds=$1
memory=$2
out=$3
mult=$4
dualise=$5
deltas=`cat $6`
shift 6
gen_count=$#
tmp=tmp${PPID}
basis=${tmp}.31
local_basis=${tmp}.32
cat /dev/null > $mult
irred_num=1
for x in `cat $irreds`; do
  w=$x
#
# Cope with dual here
#
  if [ 1 -eq $dualise ]; then
    i=1
    names=
    while [ 0 -lt $i ]; do
      if [ -e ${x}_${i} ]; then
        names="$names ${x}_${i}"
      else
        break
      fi
      let i=$i+1
    done
    i=1
    dual_names=
    for y in $names; do
      dual $y ${tmp}_${i} $memory
      dual_names="$dual_names ${tmp}_${i}"
      let i=$i+1
    done
    r=`new_irred $memory $dual_names`
    ret=$?
    if [ 0 -eq $ret ]; then
      rm -f ${tmp}.*
      echo "$name: new unknown dual irreducible found for ${x}, terminating"
      exit 255
    elif [ 1 -eq $ret ]; then
      rm -f ${tmp}.*
      echo "$name: $r"
      exit 1
    elif [ 255 -ne $ret ]; then
      rm -f ${tmp}.*
      echo "$name: unexpected return $ret from new_irred, terminating"
      exit 1
    fi
    irr=`echo $r | sed -e "s/Existing irreducible //g;s/ found//g"`
    w=$irr
# Now find $w in list of irreds
    i=1
    for x in `cat $irreds`; do
      if [ ${w} = ${x} ]; then
        irred_num=$i
        echo Found ${w} at number $irred_num
        break
      fi
    done
  fi
  i=1
  for x in $deltas; do
    if [ $i -eq $irred_num ]; then
      script=$x
      break
    fi
    let i=$i+1
  done
  wdim=`znor ${w}_1`
  y=`ls ${w}_1_I*`
  ret=$?
  if [ 0 -ne $ret ]; then
    echo "$name: failed to find irreducible script for ${w}, terminating"
    exit 1
  fi
  script_x=`echo $y | sed -e "s?${w}_1_??g"`
  ret=$?
  if [ 0 -ne $ret ]; then
    echo "$name: failed to produce irreducible script for ${w}, terminating"
    rm -f ${tmp}.*
    exit 1
  fi
  count=0
# Compute the delat word in the generators for irreducible X
  zscript -m $memory ${tmp}.0 ${tmp}.zscript $script $*
  ret=$?
  if [ 0 -ne $ret ]; then
    echo "$name: delta word computation failed for ${w}, terminating"
    exit 1
  fi
  dim=`znsf -m $memory ${tmp}.0 ${tmp}.1 .`
  ret=$?
  if [ 0 -ne $ret ]; then
    echo $dim
    echo "$name: nullspace computation failed for delta word for ${w}, terminating"
    exit 1
  fi
  if [ $dim -gt 0 ]; then
# First compute total space spun from image of gamma operator
    r=`zmspf -m $memory ${tmp}.1 ${tmp}.2 . $*`
    ret=$?
    if [ 0 -ne $ret ]; then
      rm -f ${tmp}.*
      echo $r
      echo "$name: failed to spin image of gamma, terminating"
      exit 1
    fi
    let tot=$r/$wdim
    echo tot=$tot, r=$r, wdim=$wdim, dim=$dim
    y=0
    have_local_basis=0
    while [ $y -lt $dim -a $count -lt $tot ]; do
      zsel ${tmp}.1 ${tmp}.2 $y
      ret=$?
      if [ 0 -ne $? ]; then
        rm -f ${tmp}.*
        echo "$name: zsel failed, terminating"
        exit 1
      fi
# See if vector already in space
      if [ 0 -ne $have_local_basis ]; then
        zclean -m $memory $local_basis ${tmp}.2 ${tmp}.3
        ret=$?
        if [ 0 -ne $ret ]; then
          rm -f ${tmp}.*
          echo "$name: zclean failed, terminating"
          exit 1
        fi
        r=`zrn -m $memory ${tmp}.3`
        ret=$?
        if [ 0 -ne $ret ]; then
          rm -f ${tmp}.*
          echo $r
          echo "$name: zrn failed, terminating"
          exit 1
        fi
        if [ 0 -eq $r ]; then
# This one already in the space, so ignore it
          let y=$y+1
          continue
        fi
        if [ 1 -ne $r ]; then
          echo $name: zclean returns $r, terminating
          exit 1
        fi
      fi
# Otherwise, spin up, create subspace, do sb, add vectors
      d=`zmsp -m $memory ${tmp}.2 ${tmp}.3 $*`
      ret=$?
      if [ 0 -ne $ret ]; then
        rm -f ${tmp}.*
        echo $d
        echo "$name: failed to spin vector $y, terminating"
        exit 1
      fi
      if [ $d -ne `znor ${w}_1` ]; then
        rm -f ${tmp}.*
        echo "$name: vector $y spins to an incorrect subspace, terminating"
        exit 1
      fi
      z=1
      names=
      for a in $*; do
        zmu -m $memory ${tmp}.3 $a ${tmp}.4
        zss ${tmp}.3 ${tmp}.4 ${tmp}.5_$z
        names="$names ${tmp}.5_$z"
        let z=$z+1
      done
# Need to convert our non-standard basis in ${tmp}.3 to a standard basis as per the irreducibles
# Use the script associated with irreducible x
      zscript -m $memory ${tmp}.6 ${tmp}.zscript $script_x ${names}
      ret=$?
      rm -f ${tmp}.zscript*
      if [ 0 -ne $ret ]; then
        rm -f ${tmp}.*
        echo "$name: failed to apply script to ${names}, terminating"
        exit 1
      fi
      n=`zns -m $memory ${tmp}.6 ${tmp}.7`
      ret=$?
      if [ 0 -ne $ret ]; then
        echo "$name: zns failed with code $ret, terminating"
        rm -f ${tmp}.*
        exit 1
      fi
      zsel ${tmp}.7 ${tmp}.8 0
      ret=$?
      if [ 0 -ne $ret ]; then
        echo "$name: zsel failed with code $ret, terminating"
        rm -f ${tmp}.*
        exit 1
      fi
      base_from_vector ${tmp}.8 ${tmp}.8_sb $memory ${tmp}.4 $names
      ret=$?
      if [ 1 -eq $ret ]; then
        echo "$name: base_from_vector failed, terminating"
        rm -f ${tmp}.*
        exit 1
      elif [ 0 -ne $ret ]; then
        echo "$name: base_from_vector unexpectedly returns $ret, terminating"
        rm -f ${tmp}.*
        exit 1
      fi
# Now check we've got the right irreducible
      i=1
      for x in $names; do
        if ! diff ${tmp}.8_sb_$i ${w}_$i 1>/dev/null 2>&1; then
          echo "$name: base_from_vector returns unexpected irreducible, terminating"
#         rm -f ${tmp}.*
          echo "$name: y = $y, count = $count, i = $i, x = $x"
          exit 1
        fi
        let i=$i+1
      done
# Now convert the non-standard basis in ${tmp}.3 to a standard basis
      zmu -m $memory ${tmp}.4 ${tmp}.3 ${tmp}.5
      if [ 0 -ne $ret ]; then
        rm -f ${tmp}.*
        exit 1
      fi
# ${tmp}.5 is a standard basis for this irreducible piece
      if [ 0 -eq $have_basis ]; then
        cp ${tmp}.5 $basis
        ret=$?
        have_basis=1
      else
        zjoin $basis ${tmp}.5 ${tmp}.4
        ret=$?
        if [ 0 -ne $ret ]; then
          rm -f ${tmp}.*
          echo "$name: unexpected failure in zjoin, terminating"
          exit 1
        fi
        cp ${tmp}.4 $basis
        ret=$?
      fi
      if [ 0 -ne $ret ]; then
        rm -f ${tmp}.*
        echo "$name: unexpected failure in cp, terminating"
        exit 1
      fi
      if [ 0 -eq $have_local_basis ]; then
        ldim=`zbase -m $memory ${tmp}.5 . $local_basis`
        ret=$?
        if [ 0 -ne $ret ]; then
          rm -f ${tmp}.*
          echo $ldim
          echo "$name: failed to compute ldim, terminating"
          exit 1
        fi
      else
        zclean -m $memory $local_basis ${tmp}.5 ${tmp}.4
        ret=$?
        if [ 0 -ne $ret ]; then
          rm -f ${tmp}.*
          echo "$name: zclean failed, terminating"
          exit 1
        fi
        ldim=`zbase -m $memory ${tmp}.4 . ${tmp}.5`
        ret=$?
        if [ 0 -ne $ret ]; then
          rm -f ${tmp}.*
          echo $ldim
          echo "$name: failed to compute ldim, terminating"
          exit 1
        fi
        zclean -m $memory ${tmp}.5 $local_basis ${tmp}.4
        ret=$?
        if [ 0 -ne $ret ]; then
          rm -f ${tmp}.*
          echo "$name: zclean failed, terminating"
          exit 1
        fi
        zjoin ${tmp}.4 ${tmp}.5 $local_basis
        ret=$?
        if [ 0 -ne $ret ]; then
          rm -f ${tmp}.*
          echo "$name: unexpected failure in zjoin, terminating"
          exit 1
        fi
      fi
      have_local_basis=1
      let count=$count+1
      let y=$y+1
    done
  fi
  echo $count >> $mult
  let irred_num=$irred_num+1
done
if [ 0 -eq $have_basis ]; then
  rm -f ${tmp}.*
  echo "$name: no basis found, terminating"
  exit 1
fi
if [ `znor $basis` -ne `znor $1` ]; then
  rm -f ${tmp}.*
  echo "$name: not enough basis found"
  exit 255
fi
cp $basis $out
rm -f ${tmp}.*
exit 0
