#
# $Id: split_with_element,v 1.3 2001/12/02 12:05:13 jon Exp $
#
# Script to split a representation given a particular element to work from
#
# Inputs
# $1: generator a
# $2: generator b
# $3: element with which to split
# $4: output filename base
# $5: call count to prevent looping
#
# outputs will be of the form <$3>_<q>_<nor>_{1,2}
# where nor is number of rows, and q is the prime power
#
#
# Return codes
# 1: error in parameters
# 0: success
# 253: nullity 0
# 254: did not split
# 255: irreducible
#
#set -v
#echo split_with_element $1 $2 $3 $4 $5
usage="$0: usage: $0 <a> <b> <e> <output_stem> <count>"
if [ $# -ne 5 ]; then
  echo $usage
  exit 1;
fi
a=$1
b=$2
e=$3
o=$4
c=$5
if [ -e $a -a -e $b -a -e $e ]; then
  q=`zprime $a`
  nor=`znor $a`
  noc=`znoc $a`
  if [ $nor -ne $noc ]; then
    echo "$0: $a is not square"
    exit 1
  fi
  if [ $nor -ne `znor $b` -o $nor -ne `znoc $b` ]; then
    echo "$0: $a and $b are not compatible"
    exit 1
  fi
  if [ $noc -ne `znoc $e` -o $q -ne `zprime $e` ]; then
    echo "$0: $a and $e are not compatible"
    exit 1
  fi
else
  echo "$0: missing files $a, $b or $e"
  exit 1
fi
tmp=tmp${PPID}
#echo Using tmp stem $tmp
#
# rm -f ${tmp}*
# Check above first
#
memory=200
ok=0
nullity=0
while [ 0 -eq $ok ]; do
  nullity=`zns $e ${tmp}.2 $memory`
  ret=$?
  if [ $ret -eq 0 ]; then
    ok=1
  else
    if [ $ret -eq 2 ]; then
      let memory=$memory*2
      echo Allocating more memory for zns, now $memory
    else
      exit 1
    fi
  fi
done
echo nullity $nullity
if [ $nullity -eq 0 ]; then
  echo Failed to split
  exit 253
fi
ok=0
count=$nullity
if [ $count -ge 5 ]; then
  echo Restricting span to 5 vectors
  count=5
fi
let vectors=$q**$count-1
#echo Considering $vectors vectors
zspan ${tmp}.2 ${tmp}.3 $count
if [ $? -ne 0 ]; then
  exit 1
fi
vector=0;
while [ $vector -lt $vectors ]; do
  split=0
#
# Pick vector $vector from ${tmp}.3 and attempt to spin
#
#  echo Trying vector $vector
  zsel ${tmp}.3 ${tmp}.4 $vector
  mem_ok=0
  while [ 0 -eq $mem_ok ]; do
    dim=`zsp ${tmp}.4 ${tmp}.5 $a $b $memory`
    ret=$?
    if [ $ret -eq 0 ]; then
      mem_ok=1
    else
      if [ $ret -eq 2 ]; then
        let memory=$memory*2
        echo Allocating more memory for zsp, now $memory
      else
        exit 1
      fi
    fi
  done
  let vector=$vector+1
  if [ $dim -lt $nor ]; then
    split=1
    break
  fi
  echo Resplitting with vector $vector
done
let codim=$nor-$dim
if [ $split -ne 0 ]; then
  echo Obtained a subspace of dimension $dim, codimension $codim
else
# echo checking if irreducible
  if [ $c -eq 0 ]; then
#   echo split_with_element calls irred
    irred $a $b $e $o
    ret=$?
#   echo irred returns result $ret
    if [ $ret -eq 255 ]; then
      echo irreducible $a $b found
      exit 255
    elif [ $ret -eq 254 ]; then
      exit 254
    elif [ $ret -eq 253 ]; then
      echo Serious bug found in split/irred \(nullity 0 passed to irred\)
      exit 1
    else
      exit $ret
    fi
  else
#   echo exiting 255
    if [ $count -eq $nullity ]; then
      exit 255
    else
      exit 254
    fi
    exit 255
  fi
fi
ss_name=${o}_${nor}_${dim}
qs_name=${o}_${nor}_${codim}
if [ $dim -eq $codim ]; then
  ss_name=${ss_name}_a
  qs_name=${qs_name}_b
fi
zmu ${tmp}.5 $a ${tmp}.6 1>/dev/null
zss ${tmp}.5 ${tmp}.6 ${ss_name}_1 $memory
zmu ${tmp}.5 $b ${tmp}.6 1>/dev/null
zss ${tmp}.5 ${tmp}.6 ${ss_name}_2 $memory
zqs ${tmp}.5 $a ${qs_name}_1 $memory
zqs ${tmp}.5 $b ${qs_name}_2 $memory
exit 0
